// Code generated by protoc-gen-go.
// source: msgs.proto
// DO NOT EDIT!

/*
Package msgs is a generated protocol buffer package.

It is generated from these files:
	msgs.proto

It has these top-level messages:
	Msg
*/
package msgs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Msg struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
}

func (m *Msg) Reset()                    { *m = Msg{} }
func (m *Msg) String() string            { return proto.CompactTextString(m) }
func (*Msg) ProtoMessage()               {}
func (*Msg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Msg) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*Msg)(nil), "msgs.Msg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Messages service

type MessagesClient interface {
	Echo(ctx context.Context, in *Msg, opts ...grpc.CallOption) (Messages_EchoClient, error)
}

type messagesClient struct {
	cc *grpc.ClientConn
}

func NewMessagesClient(cc *grpc.ClientConn) MessagesClient {
	return &messagesClient{cc}
}

func (c *messagesClient) Echo(ctx context.Context, in *Msg, opts ...grpc.CallOption) (Messages_EchoClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Messages_serviceDesc.Streams[0], c.cc, "/msgs.Messages/Echo", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagesEchoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Messages_EchoClient interface {
	Recv() (*Msg, error)
	grpc.ClientStream
}

type messagesEchoClient struct {
	grpc.ClientStream
}

func (x *messagesEchoClient) Recv() (*Msg, error) {
	m := new(Msg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Messages service

type MessagesServer interface {
	Echo(*Msg, Messages_EchoServer) error
}

func RegisterMessagesServer(s *grpc.Server, srv MessagesServer) {
	s.RegisterService(&_Messages_serviceDesc, srv)
}

func _Messages_Echo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Msg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagesServer).Echo(m, &messagesEchoServer{stream})
}

type Messages_EchoServer interface {
	Send(*Msg) error
	grpc.ServerStream
}

type messagesEchoServer struct {
	grpc.ServerStream
}

func (x *messagesEchoServer) Send(m *Msg) error {
	return x.ServerStream.SendMsg(m)
}

var _Messages_serviceDesc = grpc.ServiceDesc{
	ServiceName: "msgs.Messages",
	HandlerType: (*MessagesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Echo",
			Handler:       _Messages_Echo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "msgs.proto",
}

func init() { proto.RegisterFile("msgs.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 100 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xca, 0x2d, 0x4e, 0x2f,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0xc4, 0xb9, 0x98, 0x7d, 0x8b,
	0xd3, 0x85, 0x04, 0xb8, 0x98, 0x73, 0x8b, 0xd3, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x40,
	0x4c, 0x23, 0x2d, 0x2e, 0x0e, 0xdf, 0xd4, 0xe2, 0xe2, 0xc4, 0xf4, 0xd4, 0x62, 0x21, 0x39, 0x2e,
	0x16, 0xd7, 0xe4, 0x8c, 0x7c, 0x21, 0x4e, 0x3d, 0xb0, 0x7e, 0xdf, 0xe2, 0x74, 0x29, 0x04, 0xd3,
	0x80, 0x31, 0x89, 0x0d, 0x6c, 0xa2, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x66, 0xb9, 0x42,
	0x5f, 0x00, 0x00, 0x00,
}
