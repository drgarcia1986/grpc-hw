// Code generated by protoc-gen-go.
// source: simple-auth.proto
// DO NOT EDIT!

/*
Package simpleauth is a generated protocol buffer package.

It is generated from these files:
	simple-auth.proto

It has these top-level messages:
	LoginRequest
	LoginResponse
	RestrictedResponse
	Empty
*/
package simpleauth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LoginRequest struct {
	User     string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LoginRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginResponse struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *LoginResponse) Reset()                    { *m = LoginResponse{} }
func (m *LoginResponse) String() string            { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()               {}
func (*LoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LoginResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type RestrictedResponse struct {
	Message string `protobuf:"bytes,1,opt,name=Message" json:"Message,omitempty"`
}

func (m *RestrictedResponse) Reset()                    { *m = RestrictedResponse{} }
func (m *RestrictedResponse) String() string            { return proto.CompactTextString(m) }
func (*RestrictedResponse) ProtoMessage()               {}
func (*RestrictedResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RestrictedResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*LoginRequest)(nil), "simpleauth.LoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "simpleauth.LoginResponse")
	proto.RegisterType((*RestrictedResponse)(nil), "simpleauth.RestrictedResponse")
	proto.RegisterType((*Empty)(nil), "simpleauth.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SimpleAuth service

type SimpleAuthClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Restricted(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RestrictedResponse, error)
}

type simpleAuthClient struct {
	cc *grpc.ClientConn
}

func NewSimpleAuthClient(cc *grpc.ClientConn) SimpleAuthClient {
	return &simpleAuthClient{cc}
}

func (c *simpleAuthClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := grpc.Invoke(ctx, "/simpleauth.SimpleAuth/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleAuthClient) Restricted(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RestrictedResponse, error) {
	out := new(RestrictedResponse)
	err := grpc.Invoke(ctx, "/simpleauth.SimpleAuth/Restricted", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SimpleAuth service

type SimpleAuthServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Restricted(context.Context, *Empty) (*RestrictedResponse, error)
}

func RegisterSimpleAuthServer(s *grpc.Server, srv SimpleAuthServer) {
	s.RegisterService(&_SimpleAuth_serviceDesc, srv)
}

func _SimpleAuth_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleAuthServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simpleauth.SimpleAuth/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleAuthServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleAuth_Restricted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleAuthServer).Restricted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simpleauth.SimpleAuth/Restricted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleAuthServer).Restricted(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _SimpleAuth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "simpleauth.SimpleAuth",
	HandlerType: (*SimpleAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _SimpleAuth_Login_Handler,
		},
		{
			MethodName: "Restricted",
			Handler:    _SimpleAuth_Restricted_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "simple-auth.proto",
}

func init() { proto.RegisterFile("simple-auth.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x90, 0x31, 0x4b, 0xc7, 0x30,
	0x10, 0xc5, 0xa9, 0x58, 0xff, 0x7a, 0xe8, 0xd0, 0xc3, 0x21, 0x76, 0x10, 0x09, 0x08, 0x2e, 0x66,
	0xd0, 0x55, 0x14, 0x07, 0x37, 0x5d, 0xea, 0x27, 0xa8, 0xf6, 0x68, 0x8b, 0xb6, 0x89, 0xb9, 0x0b,
	0xe2, 0x67, 0xf0, 0x4b, 0x8b, 0x69, 0x6c, 0x0b, 0xfe, 0xb7, 0xbc, 0x5f, 0x5e, 0xf2, 0xde, 0x1d,
	0x14, 0xdc, 0x0f, 0xee, 0x9d, 0x2e, 0xeb, 0x20, 0x9d, 0x71, 0xde, 0x8a, 0x45, 0x98, 0xd0, 0x2f,
	0xd1, 0xb7, 0x70, 0xf8, 0x68, 0xdb, 0x7e, 0xac, 0xe8, 0x23, 0x10, 0x0b, 0x22, 0xec, 0x06, 0x26,
	0xaf, 0xb2, 0xb3, 0xec, 0xe2, 0xa0, 0x8a, 0x67, 0x2c, 0x61, 0xdf, 0xd5, 0xcc, 0x9f, 0xd6, 0x37,
	0x6a, 0x27, 0xf2, 0x59, 0xeb, 0x73, 0x38, 0x4a, 0xef, 0xd9, 0xd9, 0x91, 0x09, 0x8f, 0x21, 0x17,
	0xfb, 0x46, 0x63, 0xfa, 0x61, 0x12, 0xda, 0x00, 0x56, 0xc4, 0xe2, 0xfb, 0x57, 0xa1, 0x66, 0xf6,
	0x2a, 0xd8, 0x3c, 0x11, 0x73, 0xdd, 0x52, 0x72, 0xff, 0x49, 0xbd, 0x81, 0xfc, 0x61, 0x70, 0xf2,
	0x75, 0xf5, 0x9d, 0x01, 0x3c, 0xc7, 0xba, 0xf7, 0x41, 0x3a, 0xbc, 0x81, 0x3c, 0xc6, 0xa1, 0x32,
	0xcb, 0x10, 0x66, 0x3d, 0x41, 0x79, 0xb2, 0xe5, 0x26, 0xe5, 0xdd, 0x01, 0x2c, 0x2d, 0xb0, 0x58,
	0x1b, 0x63, 0x5a, 0x79, 0xba, 0x46, 0xff, 0x0b, 0xbf, 0xec, 0xc5, 0x05, 0x5e, 0xff, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x67, 0xf6, 0x39, 0x99, 0x55, 0x01, 0x00, 0x00,
}
