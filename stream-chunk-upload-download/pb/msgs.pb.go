// Code generated by protoc-gen-go.
// source: msgs.proto
// DO NOT EDIT!

/*
Package uploader is a generated protocol buffer package.

It is generated from these files:
	msgs.proto

It has these top-level messages:
	Msg
*/
package uploader

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Msg struct {
	// Types that are valid to be assigned to Value:
	//	*Msg_Meta_
	//	*Msg_File_
	Value isMsg_Value `protobuf_oneof:"value"`
}

func (m *Msg) Reset()                    { *m = Msg{} }
func (m *Msg) String() string            { return proto.CompactTextString(m) }
func (*Msg) ProtoMessage()               {}
func (*Msg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isMsg_Value interface {
	isMsg_Value()
}

type Msg_Meta_ struct {
	Meta *Msg_Meta `protobuf:"bytes,1,opt,name=meta,oneof"`
}
type Msg_File_ struct {
	File *Msg_File `protobuf:"bytes,2,opt,name=file,oneof"`
}

func (*Msg_Meta_) isMsg_Value() {}
func (*Msg_File_) isMsg_Value() {}

func (m *Msg) GetValue() isMsg_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Msg) GetMeta() *Msg_Meta {
	if x, ok := m.GetValue().(*Msg_Meta_); ok {
		return x.Meta
	}
	return nil
}

func (m *Msg) GetFile() *Msg_File {
	if x, ok := m.GetValue().(*Msg_File_); ok {
		return x.File
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Msg) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Msg_OneofMarshaler, _Msg_OneofUnmarshaler, _Msg_OneofSizer, []interface{}{
		(*Msg_Meta_)(nil),
		(*Msg_File_)(nil),
	}
}

func _Msg_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Msg)
	// value
	switch x := m.Value.(type) {
	case *Msg_Meta_:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Meta); err != nil {
			return err
		}
	case *Msg_File_:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.File); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Msg.Value has unexpected type %T", x)
	}
	return nil
}

func _Msg_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Msg)
	switch tag {
	case 1: // value.meta
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Msg_Meta)
		err := b.DecodeMessage(msg)
		m.Value = &Msg_Meta_{msg}
		return true, err
	case 2: // value.file
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Msg_File)
		err := b.DecodeMessage(msg)
		m.Value = &Msg_File_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Msg_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Msg)
	// value
	switch x := m.Value.(type) {
	case *Msg_Meta_:
		s := proto.Size(x.Meta)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_File_:
		s := proto.Size(x.File)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Msg_Meta struct {
	Filename string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
}

func (m *Msg_Meta) Reset()                    { *m = Msg_Meta{} }
func (m *Msg_Meta) String() string            { return proto.CompactTextString(m) }
func (*Msg_Meta) ProtoMessage()               {}
func (*Msg_Meta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *Msg_Meta) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

type Msg_File struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Msg_File) Reset()                    { *m = Msg_File{} }
func (m *Msg_File) String() string            { return proto.CompactTextString(m) }
func (*Msg_File) ProtoMessage()               {}
func (*Msg_File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

func (m *Msg_File) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Msg)(nil), "uploader.Msg")
	proto.RegisterType((*Msg_Meta)(nil), "uploader.Msg.Meta")
	proto.RegisterType((*Msg_File)(nil), "uploader.Msg.File")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Uploader service

type UploaderClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (Uploader_UploadClient, error)
}

type uploaderClient struct {
	cc *grpc.ClientConn
}

func NewUploaderClient(cc *grpc.ClientConn) UploaderClient {
	return &uploaderClient{cc}
}

func (c *uploaderClient) Upload(ctx context.Context, opts ...grpc.CallOption) (Uploader_UploadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Uploader_serviceDesc.Streams[0], c.cc, "/uploader.Uploader/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &uploaderUploadClient{stream}
	return x, nil
}

type Uploader_UploadClient interface {
	Send(*Msg) error
	Recv() (*Msg, error)
	grpc.ClientStream
}

type uploaderUploadClient struct {
	grpc.ClientStream
}

func (x *uploaderUploadClient) Send(m *Msg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uploaderUploadClient) Recv() (*Msg, error) {
	m := new(Msg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Uploader service

type UploaderServer interface {
	Upload(Uploader_UploadServer) error
}

func RegisterUploaderServer(s *grpc.Server, srv UploaderServer) {
	s.RegisterService(&_Uploader_serviceDesc, srv)
}

func _Uploader_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UploaderServer).Upload(&uploaderUploadServer{stream})
}

type Uploader_UploadServer interface {
	Send(*Msg) error
	Recv() (*Msg, error)
	grpc.ServerStream
}

type uploaderUploadServer struct {
	grpc.ServerStream
}

func (x *uploaderUploadServer) Send(m *Msg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uploaderUploadServer) Recv() (*Msg, error) {
	m := new(Msg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Uploader_serviceDesc = grpc.ServiceDesc{
	ServiceName: "uploader.Uploader",
	HandlerType: (*UploaderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _Uploader_Upload_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "msgs.proto",
}

func init() { proto.RegisterFile("msgs.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xca, 0x2d, 0x4e, 0x2f,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x28, 0x2d, 0xc8, 0xc9, 0x4f, 0x4c, 0x49, 0x2d,
	0x52, 0x5a, 0xc4, 0xc8, 0xc5, 0xec, 0x5b, 0x9c, 0x2e, 0xa4, 0xc1, 0xc5, 0x92, 0x9b, 0x5a, 0x92,
	0x28, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x6d, 0x24, 0xa4, 0x07, 0x53, 0xa0, 0xe7, 0x5b, 0x9c, 0xae,
	0xe7, 0x9b, 0x5a, 0x92, 0xe8, 0xc1, 0x10, 0x04, 0x56, 0x01, 0x52, 0x99, 0x96, 0x99, 0x93, 0x2a,
	0xc1, 0x84, 0x4d, 0xa5, 0x5b, 0x66, 0x4e, 0x2a, 0x48, 0x25, 0x48, 0x85, 0x94, 0x12, 0x17, 0x0b,
	0x48, 0xa7, 0x90, 0x14, 0x17, 0x07, 0x88, 0x9f, 0x97, 0x98, 0x9b, 0x0a, 0x36, 0x9f, 0x33, 0x08,
	0xce, 0x97, 0x92, 0xe2, 0x62, 0x01, 0xe9, 0x11, 0x12, 0xe2, 0x62, 0x49, 0x49, 0x84, 0xda, 0xcf,
	0x13, 0x04, 0x66, 0x3b, 0xb1, 0x73, 0xb1, 0x96, 0x25, 0xe6, 0x94, 0xa6, 0x1a, 0x99, 0x71, 0x71,
	0x84, 0x42, 0x6d, 0x11, 0xd2, 0xe2, 0x62, 0x83, 0xb0, 0x85, 0x78, 0x51, 0xac, 0x96, 0x42, 0xe5,
	0x6a, 0x30, 0x1a, 0x30, 0x26, 0xb1, 0x81, 0x7d, 0x6b, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x19,
	0x7d, 0x43, 0x44, 0xfb, 0x00, 0x00, 0x00,
}
